########################################## [NOTES] ################################################
# THIS IS A CHEAT LIST FOR GIT CLI USAGE
###################################################################################################
#
# [Useful Links]
# https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting/commit-level-operations
# http://sethrobertson.github.io/GitFixUm/fixup.html
#
# manage branches
# https://github.com/Kunena/Kunena-Forum/wiki/Create-a-new-branch-with-git-and-manage-branches
#
# Fork A Repo and Syncing a fork
# https://help.github.com/articles/fork-a-repo/
# 
# Create a pull request
# https://www.digitalocean.com/community/tutorials/how-to-create-a-pull-request-on-github
#
# Git HowTo: revert a commit already pushed to a remote repository
# http://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html
#
# Rewriting history using rebase Interactive
# https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History
# https://robots.thoughtbot.com/git-interactive-rebase-squash-amend-rewriting-history

# Print out the commit graph on the command line
git log --oneline --graph --decorate --all
git log --pretty=oneline --graph --decorate --all
git log --oneline --graph --color --all --decorate

# Check commit history of a file
git log -- begin.txt

# Check commit history of a file with more details
git log -p -- begin.txt

# Check commit history of a file with in oneline
git log --pretty=oneline -- filename

# To set your identity:
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com

# git diff by words
git diff --color-words
git diff --word-diff=color

# To set your editor:
git config --global core.editor emacs

# To enable color:
git config --global color.ui true

# To stage all changes for commit:
git add --all

# To stash changes locally, this will keep the changes in a separate changelist
# called stash and the working directory is cleaned. You can apply changes
# from the stash anytime
git stash

# To stash changes with a message
git stash save "message"

# To stash untracked files
# Add (git add) the file and start tracking it. Then stash. Since the entire contents of the file are new, they will be stashed, and you can manipulate it as necessary.
git add filename
git stash
OR|
git stash save -u       # As of version 1.7.7

# To list all the stashed changes
git stash list

# To apply the most recent change and remove the stash from the stash list
git stash pop

# To apply any stash from the list of stashes. This does not remove the stash
# from the stash list
git stash apply stash@{6}

# Unstash a specific file
git checkout stash@{0} -- <filename>

# Unstash a file by saving to
git show stash@{0}:<full filename>  >  <newfile>

# To commit staged changes
git commit -m "Your commit message"

# To edit previous commit message, ament the last comment
git commit --amend
git commit --amend -m "Fixes bug #42"

# Interactive rebase for the last 7 commits
git rebase -i @~7

# Interactively modify the last 3 commits
git rebase -i HEAD~3

# Git commit in the past
git commit --date="`date --date='2 day ago'`"
git commit --date="Jun 13 18:30:25 IST 2015"
# more recent versions of Git also support --date="2 days ago" directly

# To change the date of an existing commit
git filter-branch --env-filter \
    'if [ $GIT_COMMIT = 119f9ecf58069b265ab22f1f97d2b648faf932e0 ]
     then
         export GIT_AUTHOR_DATE="Fri Jan 2 21:38:53 2009 -0800"
         export GIT_COMMITTER_DATE="Sat May 19 01:01:01 2007 -0700"
     fi'

# Git commit in the past
git commit --date="`date --date='2 day ago'`"
git commit --date="Jun 13 18:30:25 IST 2015"
# more recent versions of Git also support --date="2 days ago" directly

# To change the date of an existing commit
git filter-branch --env-filter \
    'if [ $GIT_COMMIT = 119f9ecf58069b265ab22f1f97d2b648faf932e0 ]
     then
         export GIT_AUTHOR_DATE="Fri Jan 2 21:38:53 2009 -0800"
         export GIT_COMMITTER_DATE="Sat May 19 01:01:01 2007 -0700"
     fi'

# Git commit in the past
git commit --date="`date --date='2 day ago'`"
git commit --date="Jun 13 18:30:25 IST 2015"
# more recent versions of Git also support --date="2 days ago" directly

# To change the date of an existing commit
git filter-branch --env-filter \
    'if [ $GIT_COMMIT = 119f9ecf58069b265ab22f1f97d2b648faf932e0 ]
     then
         export GIT_AUTHOR_DATE="Fri Jan 2 21:38:53 2009 -0800"
         export GIT_COMMITTER_DATE="Sat May 19 01:01:01 2007 -0700"
     fi'

# To removed staged and working directory changes
git reset --hard

# To go 2 commits back
git reset --hard HEAD~2

# To remove untracked files
git clean -f -d

# To remove untracked and ignored files
git clean -f -d -x

# To push to the tracked master branch:
git push origin master

# To push to a specified repository:
git push git@github.com:username/project.git

# To delete the branch "branch_name"
git branch -D branch_name

# To make an exisiting branch track a remote branch
git branch -u upstream/foo

# To see who commited which line in a file
git blame filename

# Generates you a super-long line of text instead of wrapping them
git config --global core.pager 'less -r'

# To retreive a historical version of file ****************
git checkout [commit_id] -- <path_to_file>

# To merge a branch, you currently in master branch and you are merging patch01 into master
git merge patch01

# Manageing submodules
https://chrisjean.com/git-submodules-adding-using-removing-and-updating/

# Adding a submodule
git submodule add repo-url path

# Update all your submodules
git submodule update --init --recursive

# To sync a fork with the master repo:
git remote add upstream git@github.com:name/repo.git    # Set a new repo
git remote -v                                           # Confirm new remote repo
git fetch upstream                                      # Get branches
git branch -va                                          # List local - remote branches
git checkout master                                     # Checkout local master branch
git checkout -b new_branch                              # Create and checkout a new branch
git merge upstream/master                               # Merge remote into local repo
git show 83fb499                                        # Show what a commit did.
git show 83fb499:path/fo/file.ext                       # Shows the file as it appeared at 83fb499.
git diff branch_1 branch_2                              # Check difference between branches
git log                                                 # Show all the commits
git status                                              # Show the changes from last commit

# Commit history of a set of files
git log --pretty=email --patch-with-stat --reverse --full-index -- Admin\*.py > Sripts.patch

# Import commits from another repo
git --git-dir=../some_other_repo/.git format-patch -k -1 --stdout <commit SHA> | git am -3 -k

# You have pushed, but you want to revert everything in last commit:
git revert <The Last SHA>

# Committed once or few times, but not pushed yet, you want to revert all those commits.
git reset <last good SHA>
|
git reset --hard <last good SHA>

# Committed few, then git reset --hard, but want those commits back, --hard options sets the HEAD of the current branch back to the commit that you specify
git reflog              ##>># get the Reference log ID, a <SHA>, of last good state
git reset --hard <SHA>  ##>># return to the state of SHA

## revert to an explict version: git reset --hard <SHA>
git checkout

## revert some files to an explict version: 
git checkout <SHA> -- <filename>

## you want to re-commit those "Commits" to repo: 
git cherry-pick <SHA>

# View commits that will be pushed
git log @{u}..

# View changes that are new on a feature branch
git log -p feature --not master
git diff master...feature

# Interactive rebase for the last 7 commits
git rebase -i @~7

# Diff files WITHOUT considering them a part of git
# This can be used to diff files that are not in a git repo!
git diff --no-index path/to/file/A path/to/file/B

# To pull changes while overwriting any local commits
git fetch --all
git reset --hard origin/master

# How to view conflicts? find the conflicts and fix it
Between conflict marker "<<<<<<< HEAD" and "=======" is changed by Me
Between conflict marker "=======" and ">>>>>>> 74dfd51601bd368e03b9651641e0cfe173c6d232" is changed by others

# Update all your submodules
git submodule update --init --recursive

# Perform a shallow clone to only get latest commits
# (helps save data when cloning large repos)
git clone --depth 1 <remote-url>

# To unshallow a clone
git pull --unshallow

# ********  Merging an upstream repository into your fork ********
# https://help.github.com/articles/merging-an-upstream-repository-into-your-fork/
# Change the current working directory to your local project.
# Check out the branch you wish to merge to. Usually, you will merge into master.
git remote add upstream git@XXXXXXX
git checkout -b 1.6.x origin/1.6.x
# Pull the desired branch from the upstream repository. This method will retain the commit history without modification.
git pull https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git BRANCH_NAME
# Resolve conflicts if any
# Commit the merge and review changes
# Push the merge to your GitHub repository.
git push origin master |or| git push

# *************** This is about manipulate branches ************************
# http://www.gitguys.com/topics/adding-and-removing-remote-branches/
# **************************************************************************
# Create Remote Branches with the following commands
git branch
git branch v0
git push origin v0

# Create the branch on your local machine and switch in this branch:
git checkout -b [name_of_your_new_branch]

# Push the branch on github:
git push origin [name_of_your_new_branch]

# You can see all branches created by using:
git branch

# Add a new remote for your branch:
git remote add [name_of_your_remote]

# Push changes from your commit into your branch:
git push [name_of_your_new_remote] [name_of_your_branch]

# Update your branch when the original branch from official repository has been updated:
git fetch [name_of_your_remote]

# Then you need to apply to merge changes, if your branch is derivated from develop you need to do:
git merge [name_of_your_remote]/develop

# Delete a branch on your local filesystem:
git branch -d [name_of_your_new_branch]

# To force the deletion of local branch on your filesystem :
git branch -D [name_of_your_new_branch]

# Delete the branch on github :
git push origin :[name_of_your_new_branch]

# *************** This is about manipulate branches ************************
# Dealing with non-fast-forward errors
# https://help.github.com/articles/dealing-with-non-fast-forward-errors/
# **************************************************************************
# Sometimes, Git can't make your change to a remote repository without losing commits. When this happens, your push is refused.
# If another person has pushed to the same branch as you, Git won't be able to push your changes:
#	git push origin master
#	To https://github.com/USERNAME/REPOSITORY.git
# 	! [rejected]        master -> master (non-fast-forward)
#	error: failed to push some refs to 'https://github.com/USERNAME/REPOSITORY.git'
#	To prevent you from losing history, non-fast-forward updates were rejected
#	Merge the remote changes (e.g. 'git pull') before pushing again.  See the
#	'Note about fast-forwards' section of 'git push --help' for details.

# You can fix this by fetching and merging the changes made on the remote branch with the changes that you have made locally:
# Fetches updates made to an online repository
git fetch origin
# Merges updates made online with your local work
git merge origin YOUR_BRANCH_NAME
## Or, you can simply use git pull to perform both commands at once:
# Grabs online updates and merges them with your local work
git pull origin YOUR_BRANCH_NAME

# Create a bare branch (one that has no commits on it)
git checkout --orphan branch_name

# Checkout a new branch from a different starting point
git checkout -b master upstream/master

# Remove all stale branches (ones that have been deleted on remote)
# So if you have a lot of useless branches, delete them on Github and then run this
git remote prune origin

# Used to find all branches which can be safely deleted, since those branches are fully contained by HEAD
git branch --merged

# The following can be used to prune all remotes at once
git remote prune $(git remote | tr '\n' ' ')

# Revisions can also be identified with :/text
# So, this will show the first commit that has "cool" in their message body
git show :/cool

# Undo parts of last commit in a specific file
git checkout -p HEAD^ -- /path/to/file

# Revert a commit and keep the history of the reverted change as a separate revert commit
git revert <commit SHA>

# Pich a commit from a branch to current branch. This is different than merge as
# this just applies a single commit from a branch to current branch
git cherry-pick <commit SHA1>

# Delete the last commit already pushed
git push mathnet +dd61ab32^:master
OR|
git reset HEAD^ --hard
git push mathnet -f

# Delete the second last commit already pushed
git rebase -i dd61ab32^
git push mathnet -f

# How do i get git to show me which branches are tracking what
git branch -vv   # doubly verbose

# For local branches only
git branch -lvv

# For remote branches only
git branch -rvv

# How do I change the remote a git branch is tracking?
# http://www.drdobbs.com/architecture-and-design/git-tracking-relationships-use-the-full/240168881
git branch branch_name --set-upstream-to your_new_remote/branch_name  # Without deleting anything, using git v1.8.0 or later
OR...
git branch --set-upstream branch_name your_new_remote/branch_name     # Using git up to v1.7.12

# Rebase your branch based on the master
# https://makandracards.com/makandra/10173-git-how-to-rebase-your-feature-branch-from-one-branch-to-another
## First checkout/pull master
git checkout master
git pull origin master
## Checkout branch and rebase 
git checkout RB
git rebase master
## Above 2 command can be done in 1
git rebase master RB

# Manage PR requests Method 1
# Download the patch file generated by PR into current branch
curl -L http://github.com/cbeust/testng/pull/17.patch | git am
curl https://github.com/sclasen/jcommander/commit/bd770141029f49bcfa2e0d6e6e6282b531e69179.patch | git am

# Manage PR requests Method 2
git remote add nullin git://github.com/nullin/testng.git  # Add remote
git fetch nullin  # Fetch remote code
git merge kneath/error-page  # Merge into current branch
git push origin master  # Push to my remote

# Manage PR requests Method 3, Cherry pick
git remote add nullin git://github.com/nullin/testng.git  # Create a remote
git fetch nullin  # Fetch code
git cherry-pick commit1  # Pick up the interested commits into current branch
git push origin master  # Push to remote

# Fix Author email in the commit history
# For example, if your commit history is A-B-C-D-E-F with F as HEAD, and you want to change the author of C and D, then you would...
# Or https://help.github.com/articles/changing-author-info/
Specify git rebase -i B
change the lines for both C and D to edit
Once the rebase started, it would first pause at C
You would git commit --amend --author="Author Name <email@address.com>"
Then git rebase --continue
It would pause again at D
Then you would git commit --amend --author="Author Name <email@address.com>" again
git rebase --continue
The rebase would complete.
