# Pretty print the json
jq "." < filename.json

# Access the value at key "foo"
jq '.foo'

# Access first list item
jq '.[0]'

# Slice & Dice
jq '.[2:4]'
jq '.[:3]'
jq '.[-2:]'

# For PUPPET
# Using jq, we can examine the JSON file and find the problem definitions.
jq .resources[].title <client.example.com.json

# To look at our problem definition, we'll select the resource whose title is "one", as shown here
jq '.resources[] | select(.title=="one")' <client.example.com.json

# /opt/puppetlabs/puppet/cache/state/classes.txt file contains a list of classes applied to the machine
# Use jq again to query the JSON of the current catalog, as shown in the following command
jq .classes[] </opt/puppetlabs/puppet/cache/client_data/catalog/client.example.com.json

