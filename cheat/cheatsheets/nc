# To open a TCP connection to port 42 of host.example.com, using port 31337 as the source port, with a timeout of 5 seconds:
nc -p 31337 -w 5 host.example.com 42

# Alternatively, it might be useful to know which server software is running, and which versions. This information is often contained within the greeting banners. To retrieve these, it is necessary to first make a connection, and then break the connection when the banner has been retrieved. This can be accomplished by specifying a small timeout with the -w flag, or perhaps by issuing a "QUIT" command to the server:
# http://www.computerhope.com/unix/nc.htm
echo "QUIT" | nc host.example.com 20-30
#SSH-1.99-OpenSSH_3.6.1p2 Protocol mismatch. 
#220 host.example.com IMS SMTP Receiver Version 0.84 Ready

# To open a UDP connection to port 53 of host.example.com:
nc -u host.example.com 53

# To open a TCP connection to port 42 of host.example.com using 10.1.2.3 as the IP for the local end of the connection:
nc -s 10.1.2.3 host.example.com 42

# To create and listen on a UNIX-domain stream socket:
nc -lU /var/tmp/dsocket

# To connect to port 42 of host.example.com via an HTTP proxy at 10.2.3.4, port 8080. This example could also be used by ssh(1); see the ProxyCommand directive in ssh_config(5) for more information.
nc -x10.2.3.4:8080 -Xconnect host.example.com 42

# The same example again, this time enabling proxy authentication with username "ruser" if the proxy requires it:
nc -x10.2.3.4:8080 -Xconnect -Pruser host.example.com 42

# To choose the source IP for the testing using the -s option
nc -zv -s source_IP target_IP Port

# Forces nc to stay listening for another connection after its current connection is completed
nc -lk 10.1.2.3 4000

# Linux System using tar and netcat
## On the receiving end do:
netcat -l -p 7000 | tar x
##And on the sending end do:
tar cf - * | netcat otherhost 7000

# OpenBSD using tar and nc; OpenBSD usually offers a much tighter system rather than the mess you have with Linux. OpenBSD has its own verison of netcat just refered as nc. The tar command is less sloppy than what you find in Linux. So if you're using two OpenBSD machines then one would do the following.
# On the receiving end do:
nc -l 7000 | tar -xpf -
# And on the sending end do:
tar -cf - * | nc otherhost 7000

# Moving LVM images between machines without ssh
## On the receiving end do:
nc -l 7000 | dd of=/dev/mapper/vgfoo-lvbar bs=32768
## And on the sending end do:
dd if=/dev/mapper/vgbaz-lvquz bs=32768 | nc otherhost 7000
