# NOTES
https://datacenteroverlords.com/2012/03/01/creating-your-own-ssl-certificate-authority/
# Use the below web page for generating a command
https://www.digicert.com/easy-csr/openssl.htm

# To create a 2048-bit private key:
openssl genrsa -out server.key 2048

# To create the Certificate Signing Request (CSR):
openssl req -new -key server.key -out server.csr

# To sign a certificate using a private key and CSR:
openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt

# (The above commands may be run in sequence to generate a self-signed SSL certificate.)

# To show certificate information for a certificate signing request
openssl req -text -noout -in server.csr

# To show certificate information for generated certificate
openssl x509 -text -noout -in server.crt 

# To get the sha256 fingerprint of a certificate
openssl x509 -in server.crt -noout -sha256 -fingerprint

# view and verify certificate against a website
openssl s_client -showcerts -verify 32 -connect gopkg.in:443

# To view certificate expiration:
echo | openssl s_client -connect <hostname>:443 2> /dev/null | \
awk '/-----BEGIN/,/END CERTIFICATE-----/' | \
openssl x509 -noout -enddate

# Generate Diffie-Hellman parameters:
openssl dhparam -outform PEM -out dhparams.pem 2048

# Generate a password
openssl rand -hex 10

# Generate a certificate signing request (CSR) for an existing private key
openssl req -out CSR.csr -key privateKey.key -new

# Generate a certificate signing request based on an existing certificate
openssl x509 -x509toreq -in certificate.crt -out CSR.csr -signkey privateKey.key

# Remove a passphrase from a private key
openssl rsa -in privateKey.pem -out newPrivateKey.pem

# Check a private key
openssl rsa -in privateKey.key -check

# Check a certificate
openssl x509 -in certificate.crt -text -noout

# Check a PKCS#12 file (.pfx or .p12)
openssl pkcs12 -info -in keyStore.p12

# Verify the Certificate Signer Authority
openssl x509 -in certfile.pem -noout -issuer -issuer_hash

# Check Hash Value of A Certificate
openssl x509 -noout -hash -in bestflare.pem

# Convert DER to PEM format
openssl x509 –inform der –in sslcert.der –out sslcert.pem

# Convert PEM to DER format
openssl x509 –outform der –in sslcert.pem –out sslcert.der

# Verifying Enabled TLS Versions
# To verify provided TLS versions, use openssl s_client
# Connect using SSLv3
openssl s_client -connect 127.0.0.1:5671 -ssl3
# Connect using TLSv1.0 through v1.2
openssl s_client -connect 127.0.0.1:5671 -tls1
# And look for the following in the output
SSL-Session:
  Protocol  : TLSv1

#################################################################################
# CREATING YOUR OWN SSL CERTIFICATE AUTHORITY (AND DUMPING SELF SIGNED CERTS)
#################################################################################
# CREATE THE ROOT KEY
openssl genrsa -out rootCA.key 2048
openssl genrsa -des3 -out rootCA.key 2048
# THE NEXT STEP IS TO SELF-SIGN THIS CERTIFICATE
openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 1024 -out rootCA.pem
# INSTALL ROOT CERTIFICATE INTO WORKSTATIONS
******** some steps here ********
# CREATE A CERTIFICATE (DONE ONCE PER DEVICE)
openssl genrsa -out device.key 2048
# ONCE THE KEY IS CREATED, YOU’LL GENERATE THE CERTIFICATE SIGNING REQUEST.
openssl req -new -key device.key -out device.csr
# CREATES A SIGNED CERTIFICATE CALLED DEVICE.CRT WHICH IS VALID FOR 500 DAYS
openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 500 -sha256
# THE NEXT STEP IS TO TAKE THE KEY AND THE CERTIFICATE AND INSTALL THEM IN YOUR DEVICE





















