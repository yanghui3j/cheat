# Show all facter facts, and those defined for use in puppet (run as root)
facter -p

# Using the hiera command for lookups
hiera puppetmaster

# Using the hiera command with debugging enabled
hiera -d puppetmaster

# Using Puppet to Perform a Hiera Lookup
puppet apply -e '$foo = hiera("firewall::rules") notify { $foo: }'

# Hiera Lookups Using Variables
hiera -d servername environment=prod

# Testing puppet code, adding following code to ss.pp
service { 'snmpd':
    ensure => 'running',
    hasstatus => true,
    status => 'touch /tmp/abc',
}
# Then run following command against the pp file
puppet apply -vd ss.pp

# Run puppet even when it's disabled
puppet agent -t --agent_disabled_lockfile=/tmp/test

# Run puppet against your environment in NOOP mode
CACHE=no puppet agent --test --noop --no-use_srv_records --environment jzhu

# Run puppet against your environment
CACHE=no puppet agent --test --no-use_srv_records --environment jzhu

# Run puppet against your environment when puppet is disabled
CACHE=no puppet agent --test --no-use_srv_records --environment jzhu --agent_disabled_lockfile=/tmp/test

# locate the default templatedir by running
puppet config print templatedir --section master

# This example uses `puppet resource` to return a Puppet configuration for the user `luke`:
# Syntax:
# puppet resource resource_type 
puppet resource user luke

# Verify port number for puppetmaster
puppet config print masterport

# You may force a master to compile a catalog for a node, as follows (Puppet will print out the catalog, in JSON format, to the terminal)
puppet master --compile client.example.com

# From the command line, you can pass the --evaltrace --summarize option to puppet agent to tell the agent to keep a track of how long
# the operations took to complete and display a summary at the end of compilation
puppet agent -t --evaltrace --summarize

# Generates boilerplate for a new module by creating the directory structure and files recommended for the Puppet community's best practices.
# puppet help module generate
puppet module generate --debug user-demomodule

# Validate a manifest file
puppet parser validate test.pp

# Restore a file from clientbucket, use --environment=production if you have different environment used
# restore a file with md5 as ee6e8ff6f94123838a6d6df1514af3c0 in clientbucket from the local copy
puppet filebucket restore --local --bucket /opt/puppetlabs/puppet/cache/clientbucket/ /usr/local/bin/plugins/check_ipmi ee6e8ff6f94123838a6d6df1514af3c0 --environment=production

# To list files
puppet filebucket --environment=production --bucket=/opt/puppetlabs/puppet/cache/clientbucket list

# To list files with date range
puppet filebucket --environment=production --bucket=/opt/puppetlabs/puppet/cache/clientbucket -f 2017-08-03 -t 2017-08-05 list

# Find the puppet configurations
puppet config print|grep codedir

# You see this error: Could not find a directory environment named 'puppet4'
# anywhere in the path: /etc/puppetlabs/code/environments. Does the directory
# exist?
puppet --help --environment=production

# On the node, check what class applied
cat $(puppet agent --configprint classfile)

# Look for puppet's info
puppet node find 'myhost' --render-as yaml --terminus rest | grep " - "

# Using tags
puppet agent --test --tags apache,us_mirror1




