# Show all facter facts, and those defined for use in puppet (run as root)
facter -p

# Using the hiera command for lookups
hiera puppetmaster

# Using the hiera command with debugging enabled
hiera -d puppetmaster

# Using Puppet to Perform a Hiera Lookup
puppet apply -e '$foo = hiera("firewall::rules") notify { $foo: }'

# Hiera Lookups Using Variables
hiera -d servername environment=prod

# Testing puppet code, adding following code to ss.pp
service { 'snmpd':
    ensure => 'running',
    hasstatus => true,
    status => 'touch /tmp/abc',
}
# Then run following command against the pp file
puppet apply -vd ss.pp

# Run puppet even when it's disabled
puppet agent -t --agent_disabled_lockfile=/tmp/test

# Run puppet against your environment in NOOP mode
CACHE=no puppet agent --test --noop --no-use_srv_records --environment jzhu

# Run puppet against your environment
CACHE=no puppet agent --test --no-use_srv_records --environment jzhu

# Run puppet against your environment when puppet is disabled
CACHE=no puppet agent --test --no-use_srv_records --environment jzhu --agent_disabled_lockfile=/tmp/test

# locate the default templatedir by running
puppet config print templatedir --section master

# This example uses `puppet resource` to return a Puppet configuration for the user `luke`:
# Syntax:
# puppet resource resource_type 
puppet resource user luke

# Verify port number for puppetmaster
# puppet config print masterport
