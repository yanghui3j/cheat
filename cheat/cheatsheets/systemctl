# List all loaded/active units

# Restarting/reloading, Run if .service file has changed
systemctl daemon-reload
systemctl restart

systemctl list-units

# List usable unit
systemctl list-unit-files

# List all usable socket
systemctl list-unit-files --type=socket

# List all mounted
systemctl list-unit-files --type=mount

# List all services
systemctl list-unit-files --type=service

# List all running units with type of service
systemctl list-units --type=service

# List failed units
systemctl list-units --failed

# List currently loaded targets
systemctl list-units --type=target

# List all diabled units
systemctl list-units --all --state=inactive
systemctl list-units --type service --all --state=inactive

# Change current target
systemctl isolate foo.target

# List all failed unit
systemctl --failed

# Check is unit enabled
systemctl is-enabled crond.service

# Check is a service is running or not
systemctl status firewalld.service

# Mask/Unmask service, make it not startup
systemctl mask dnsmasq.service
systemctl unmask httpd.service

# Kill services
systemctl kill httpd

# mount/umount/re-mount mount points
systemctl start tmp.mount
systemctl stop tmp.mount
systemctl restart tmp.mount
systemctl reload tmp.mount
systemctl status tmp.mount

# Control sockets
systemctl start cups.socket
systemctl restart cups.socket
systemctl stop cups.socket
# Check the status of a service
systemctl status foo.service

# Start a service
systemctl start foo.service

# Restart a service
systemctl restart foo.service

# Stop a service
systemctl stop foo.service

# Reload a service's configuration
systemctl reload foo.service

# activate service during bootup
systemctl is-active httpd.service

# Check if service is in failed state
systemctl is-failed application.service

# Enable a service to startup on boot
systemctl enable foo.service

# Disable a service to startup on boot
systemctl disable foo.service

# List the dependencies of a service
# when no service name is specified, lists the dependencies of default.target
systemctl list-dependencies foo.service 

systemctl reload cups.socket
systemctl status cups.socket

# Enable/Disable during bootup
systemctl is-active cups.socket
systemctl enable cups.socket
systemctl disable cups.socket

# mask/unmask socket
systemctl mask cups.socket
systemctl unmask cups.socket

# Change CPU shares
systemctl set-property httpd.service CPUShares=2000

# List CPU shares
systemctl show -p CPUShares dbus.socket

# Show service configurations
systemctl show cron

# Enter to rescue mode
systemctl rescue

# Enter emergency mode
systemctl emergency

# List run level
systemctl get-default

# Change Run level
systemctl isolate runlevel5.target
#OR
systemctl isolate graphical.target

# Set default Run level
systemctl set-default runlevel3.target

# If service is running, restart it
systemctl condrestart foo.service

# Reboot system
systemctl reboot

# Halt system
systemctl halt

# Poweroff System
systemctl poweroff

# Suspend System
systemctl suspend

# Hibernate System
systemctl Hibernate

# Enter interactive sleeping state
systemctl hybrid-sleep

# Control remote system via ssh
systemctl --host user_name@host_name command
systemctl -H user_name@host_name command
systemctl -H root@rhel7.example.com status httpd.service

# Setting services on bootup
systemctl enable name.service
systemctl disable name.service
systemctl mask name.service
systemctl unmask name.service
systemctl cat name.service
systemctl edit name.service
systemctl show name.service
systemctl show name.service -p property

# List all dependencies of a unit
systemctl list-dependencies nginx.service
systemctl list-dependencies --all nginx.service


# Show all targets
systemctl list-unit-files --type=target

# Show all units of a target
systemctl list-dependencies multi-user.target

# Show default target for bootup
systemctl get-default

# Set default target for bootup
systemctl set-default multi-user.target

# Switch target, but not stop previous target
systemctl isolate

# Shut processes belong to previous target but does not belong to later target
systemctl isolate multi-user.target








