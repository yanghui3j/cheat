# Useful links:
https://danielmiessler.com/study/tcpdump/
http://bencane.com/2014/10/13/quick-and-practical-reference-for-tcpdump/

# TCPDump is a packet analyzer. It allows the user to intercept and display TCP/IP
# and other packets being transmitted or received over a network. (cf Wikipedia).
# Note: 173.194.40.120 => google.com

# Dumps all packets to or from that MAC address
tcpdump "ether host 11:22:33:44:55:66"

# Dumps all packets to or from a network, specified using CIDR notation
tcpdump "net 192.168.12.4/30"

# Dumps all packets to or from a network, specified using a mask
tcpdump "net 192.168.12.4 mask 255.255.255.252"

# Dumps all packets with source port 22/tcp
tcpdump tcp src port 53

# Show only IP traffic to or from thisIP
tcpdump host {thisIP}

# Show only IP traffic between thisIP and thatIP
tcpdump host {thisIP} && host {thatIP}

# Ignore traffic from myIP (necessary if you're running TCPDUMP on a remote machine to stop it from capturing the terminal session with your machine)
tcpdump !(host {myIP}) && {remainder of expression}

# Intercepts all packets on eth0
tcpdump -i eth0

# Intercepts all packets from/to 173.194.40.120
tcpdump host 173.194.40.120

# Intercepts all packets on all interfaces from / to 173.194.40.120 port 80
# -nn => Disables name resolution for IP addresses and port numbers.
tcpdump -nn -i any host 173.194.40.120 and port 80

# Make a grep on tcpdump (ASCII)
# -A  => Show only ASCII in packets.
# -s0 => By default, tcpdump only captures 68 bytes.
tcpdump -i -A any host 173.194.40.120 and port 80 | grep 'User-Agent'

# With ngrep
# -d eth0 => To force eth0 (else ngrep work on all interfaces)
# -s0 => force ngrep to look at the entire packet. (Default snaplen: 65536 bytes)
ngrep 'User-Agent' host 173.194.40.120 and port 80

# Intercepts all packets on all interfaces from / to 8.8.8.8 or 173.194.40.127 on port 80
tcpdump 'host ( 8.8.8.8 or 173.194.40.127 ) and port 80' -i any

# Intercepts all packets SYN and FIN of each TCP session.
tcpdump 'tcp[tcpflags] & (tcp-syn|tcp-fin) != 0'

# To display SYN and FIN packets of each TCP session to a host that is not on our network
tcpdump 'tcp[tcpflags] & (tcp-syn|tcp-fin) != 0 and not src and dst net local_addr'

# To display all IPv4 HTTP packets that come or arrive on port 80 and that contain only data (no SYN, FIN no, no packet containing an ACK)
tcpdump 'tcp port 80 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)'

# Saving captured data
tcpdump -w file.cap

# Reading from capture file
tcpdump -r file.cap

# Show content in hexa
# Change -x to -xx => show extra header (ethernet).
tcpdump -x

# Show content in hexa and ASCII
# Change -X to -XX => show extra header (ethernet).
tcpdump -X

# Note on packet maching:
# Port matching:
# - portrange 22-23
# - not port 22
# - port ssh
# - dst port 22
# - src port 22
#
# Host matching:
# - dst host 8.8.8.8
# - not dst host 8.8.8.8
# - src net 67.207.148.0 mask 255.255.255.0
# - src net 67.207.148.0/24

# A deeper look at the traffic adds -X for payload but doesn't grab any more of the packet
tcpdump -nnvvXS

# Heavy packet viewing the final “s” increases the snaplength, grabbing the whole packet
tcpdump -nnvvXSs 1514


# Show me all URGENT (URG) packets
tcpdump 'tcp[13] & 32!=0'


# Show me all ACKNOWLEDGE (ACK) packets…
tcpdump 'tcp[13] & 16!=0'

# Show me all PUSH (PSH) packets…
tcpdump 'tcp[13] & 8!=0'

# Show me all RESET (RST) packets…
tcpdump 'tcp[13] & 4!=0'

# Show me all SYNCHRONIZE (SYN) packets…
tcpdump 'tcp[13] & 2!=0'

# Show me all FINISH (FIN) packets…
tcpdump 'tcp[13] & 1!=0'

# Show me all SYNCHRONIZE/ACKNOWLEDGE (SYNACK) packets…
tcpdump 'tcp[13]=18'

# Capture TCP Flags Using the tcpflags Option…
tcpdump 'tcp[tcpflags] & & tcp-syn != 0'

# IPv6 traffic
tcpdump ip6

# Packets with both the RST and SYN flags set (why?)
tcpdump 'tcp[13] = 6'

# Traffic with the 'Evil Bit' Set
tcpdump 'ip[6] & 128 != 0'

